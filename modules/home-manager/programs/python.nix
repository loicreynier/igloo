{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.programs.python;
in {
  options.programs.python = {
    enable = lib.mkEnableOption "the Python interpreter";

    version = lib.mkOption {
      type = with lib.types; nullOr str;
      description = ''
        Python version.
        Setting automatically sets the Python package set
        `programs.python.pythonPackages`.
        Periods in the version are stripped out
        to match the `nixpkgs` naming convention.
      '';
      apply = opt:
        if opt != null
        then lib.replaceStrings ["."] [""] opt
        else null;
      default = null;
      defaultText = lib.literalExpression "null";
      example = lib.literalExpression ''"311'';
    };

    pythonPackages = lib.mkOption {
      type = lib.types.raw;
      description = "Python package set to use.";
      default =
        if cfg.version != null
        then pkgs."python${cfg.version}Packages"
        else pkgs.python3Packages;
      defaultText = lib.literalExpression "pkgs.python3Packages";
      example = lib.literalExpression "pkgs.python311Packages";
    };

    package =
      lib.mkPackageOption cfg.pythonPackages "Python interpreter" {
        default = ["python"];
      }
      // {
        apply = pkg:
          if pkg ? withPackages
          then
            ((pkg.withPackages cfg.packages).override
              (_: {ignoreCollisions = true;}))
          else
            lib.trace ''
              Provided `programs.python.package` doesn't have
              a `withPackages` function.
              Packages listed in `programs.python.packages`
              could not be installed.
            '';
      };

    config = lib.mkOption {
      type = with lib.types; nullOr lines;
      description = ''
        Python interpreter startup configuration. See
        <https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP>
        for details.
      '';
      default = null;
      defaultText = lib.literalExpression "null";
      example = lib.literalExpression ''
        import numpy as np
      '';
    };

    configPath = lib.mkOption {
      type = lib.types.path;
      description = ''
        Python interpreter startup configuration file path. See
        <https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP>
        for details.
      '';
      default = "${config.xdg.configHome}/python/startup.py";
      defaultText = "$XDG_CONFIG_HOME/python/startup.py";
      example =
        lib.literalExpression
        ''"${config.xdg.configHome}/pythonrc.py"'';
    };

    packages = lib.mkOption {
      type = with lib.types; functionTo (listOf package);
      description = "List of packages available from the interpreter";
      default = _: [];
      defaultText = lib.literalExpression "pkgs: []";
      example = lib.literalExpression "pkgs: [pkgs.numpy]";
    };
  };

  config.home = {
    packages = lib.mkIf cfg.enable [cfg.package];

    sessionVariables = lib.mkIf (cfg.config != null) {
      PYTHONSTARTUP = cfg.configPath;
    };

    file."${cfg.configPath}" = lib.mkIf (cfg.config != null) {
      text = ''
        """Python interpreter configuration file.

        Generated by Home Manager, do not edit manually.
        See: https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP

        This script is executed at the start of each interactive python console
        when it is defined in the `PYTHONSTARTUP` environment variable.
        """

        ${cfg.config}
      '';
    };
  };
}
