{
  config,
  lib,
  pkgs,
  ...
}:
let
  cfg = config.programs.python;
in
{
  options.programs.python = {
    enable = lib.mkEnableOption "the Python interpreter";

    version = lib.mkOption {
      type = with lib.types; nullOr str;
      description = ''
        Python version.
        Setting automatically sets the Python package set
        `programs.python.pythonPackages`.
        Periods in the version are stripped out
        to match the `nixpkgs` naming convention.
      '';
      apply = opt: if opt != null then lib.replaceStrings [ "." ] [ "" ] opt else null;
      default = null;
      defaultText = lib.literalExpression "null";
      example = lib.literalExpression ''"311'';
    };

    pythonPackages = lib.mkOption {
      type = lib.types.raw;
      description = "Python package set to use.";
      default = if cfg.version != null then pkgs."python${cfg.version}Packages" else pkgs.python3Packages;
      defaultText = lib.literalExpression "pkgs.python3Packages";
      example = lib.literalExpression "pkgs.python311Packages";
    };

    package =
      lib.mkPackageOption cfg.pythonPackages "Python interpreter" {
        default = [ "python" ];
      }
      // {
        apply =
          pkg:
          if pkg ? withPackages then
            ((pkg.withPackages cfg.packages).override (_: {
              ignoreCollisions = true;
            }))
          else
            lib.trace ''
              Provided `programs.python.package` doesn't have
              a `withPackages` function.
              Packages listed in `programs.python.packages`
              could not be installed.
            '';
      };

    config = lib.mkOption {
      type = with lib.types; nullOr (either path lines);
      description = ''
        Python interpreter startup configuration. See
        <https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP>
        for details.
      '';
      default = null;
      defaultText = lib.literalExpression "null";
      example = lib.literalExpression ''
        import numpy as np
      '';
    };

    configPath = lib.mkOption {
      type = lib.types.path;
      description = ''
        Python interpreter startup configuration file path. See
        <https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP>
        for details.
      '';
      default = "${config.home.homeDirectory}/.config/python/startup.py";
      defaultText = lib.literalExpression ''"''${config.home.homeDirectory}/.config/python/startup.py"'';
      example = lib.literalExpression ''
        import numpy as np
      '';
    };

    historyPath = lib.mkOption {
      type = with lib.types; nullOr path;
      description = ''
        Python interpreter history file path. See
        <https://docs.python.org/3.13/using/cmdline.html#envvar-PYTHON_HISTORY>
        for details.
        This option is only available in Python 3.13.
      '';
      default = null;
      defaultText = lib.literalExpression "null";
      example = lib.literalExpression ''
        "${config.xdg.stateHome}/python_history"
      '';
    };

    enableColors =
      lib.mkEnableOption ''
        colors in the interpreter. See
        <https://docs.python.org/3.13/using/cmdline.html#envvar-PYTHON_COLORS>
        for details.
        This option is only available in Python 3.13.
      ''
      // {
        default = true;
      };

    packages = lib.mkOption {
      type = with lib.types; functionTo (listOf package);
      description = "List of packages available from the interpreter";
      default = _: [ ];
      defaultText = lib.literalExpression "pkgs: []";
      example = lib.literalExpression "pkgs: [pkgs.numpy]";
    };
  };

  config.home = {
    packages = lib.mkIf cfg.enable [ cfg.package ];

    sessionVariables = lib.mkMerge [
      (lib.mapAttrs (_: toString) (
        lib.filterAttrs (_: var: var != [ ] && var != null) {
          PYTHONSTARTUP = cfg.configPath;
          PYTHON_HISTORY = cfg.historyPath;
        }
      ))
      (lib.mkIf (!cfg.enableColors) {
        # TODO: test behavior in Python 3.13
        PYTHON_COLORS = "0";
      })
    ];

    file."${cfg.configPath}" =
      let
        # Use comments instead of multiline strings
        # to prevent the creation of the docstring `__doc__` variable
        configHeader = ''
          # Python interpreter configuration file.
          #
          # Generated by Home Manager, do not edit manually.
          # See: https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP
          #
          # This script is executed at the start of each interactive python shell
          # when it is defined in the `PYTHONSTARTUP` environment variable.
        '';
      in
      lib.mkIf (cfg.config != null) {
        source =
          if builtins.isPath cfg.config then
            cfg.config
          else
            pkgs.writeText "python/startup.py" ''
              ${configHeader}
              ${cfg.config}
            '';
      };
  };
}
