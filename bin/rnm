#!/usr/bin/env bash

the_name="rnm"

print_usage() {
  echo "Usage: $the_name [-h | --help] [-f | --force] <file> <new-filename>"
  echo
  echo "OPTIONS"
  echo "  -h, --help     Display this help message"
  echo "  -f, --force    Force rename if the new filename already exists"
}

# Transform long options to short ones for `getopts`
for arg in "$@"; do
  shift
  case "$arg" in
  "--help")
    set -- "$@" "-h"
    ;;
  "--force")
    set -- "$@" "-f"
    ;;
  *)
    set -- "$@" "$arg"
    ;;
  esac
done

# Default behavior
force_rename=false
mvflags="-v"

while getopts ":hf" opt; do
  case ${opt} in
  h)
    print_usage
    exit 0
    ;;
  f)
    force_rename=true
    ;;
  *)
    echo "Invalid option: $opt"
    print_usage
    exit 2
    ;;
  esac
done
shift $((OPTIND - 1))

if [ $# -ne 2 ]; then
  print_usage
  exit 1
fi

# Parse and convert to absolute paths
# Using `realink` here because it converts to absolute path
# and remove both duplicate and trailing slashing
# which is tideous in pure Bash.
# Also, it resolve symbolic links which can be useful on a Nix system.
old_filename=$(readlink -n -e "$1")
new_filename=$(readlink -n -m "$(dirname "$old_filename")/$2")

if [ ! -e "$old_filename" ]; then
  echo "Error: File '${old_filename}' does not exist"
  exit 1
fi

if git ls-files --error-unmatch "$old_filename" &>/dev/null; then
  git mv $mvflags "$old_filename" "$new_filename"

else
  [ $force_rename == true ] && mvflags="-v"
  mv $mvflags "$old_filename" "$new_filename"
fi
